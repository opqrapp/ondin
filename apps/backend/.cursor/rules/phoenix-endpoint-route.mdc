---
description: Phoenix 엔드포인트와 라우트 추가 가이드
globs: 
alwaysApply: false
---
# Phoenix 엔드포인트와 라우트 추가 가이드

이 가이드는 Phoenix 프레임워크에서 새로운 엔드포인트와 라우트를 추가하는 방법을 설명합니다.

## 1. 컨트롤러 생성

새로운 엔드포인트를 처리할 컨트롤러를 생성합니다. 컨트롤러는 `lib/ondin_web/controllers` 디렉토리에 위치해야 합니다.

```elixir
# lib/ondin_web/controllers/example_controller.ex
defmodule OndinWeb.ExampleController do
  use OndinWeb, :controller

  def index(conn, _params) do
    json(conn, %{message: "Hello from Example Controller"})
  end
end
```

## 2. 라우터에 경로 추가

`lib/ondin_web/router.ex` 파일에 새로운 라우트를 추가합니다. 라우트는 적절한 파이프라인과 스코프 내에 정의되어야 합니다.

```elixir
# lib/ondin_web/router.ex
scope "/api", OndinWeb do
  pipe_through :api
  
  # REST 엔드포인트 예시
  resources "/examples", ExampleController, only: [:index, :show, :create, :update, :delete]
  
  # 단일 엔드포인트 예시
  get "/example", ExampleController, :index
end
```

### 라우트 옵션

- `resources`: RESTful 리소스를 위한 모든 CRUD 라우트를 생성
- `only`: 특정 액션만 포함
- `except`: 특정 액션 제외
- HTTP 메서드: `get`, `post`, `put`, `patch`, `delete`

## 3. JSON API 응답 처리

JSON API를 위한 응답을 처리할 때는 다음과 같은 패턴을 사용합니다:

```elixir
def create(conn, params) do
  case YourContext.create_resource(params) do
    {:ok, resource} ->
      conn
      |> put_status(:created)
      |> json(%{data: resource})
      
    {:error, changeset} ->
      conn
      |> put_status(:unprocessable_entity)
      |> json(%{errors: format_errors(changeset)})
  end
end
```

## 4. 파이프라인 설정

특정 라우트 그룹에 대한 미들웨어를 설정하려면 파이프라인을 사용합니다:

```elixir
# lib/ondin_web/router.ex
pipeline :api do
  plug :accepts, ["json"]
  plug :fetch_session
  # 추가 플러그 설정
end
```

## 5. 테스트

새로운 엔드포인트에 대한 테스트는 `test/ondin_web/controllers` 디렉토리에 작성합니다:

```elixir
# test/ondin_web/controllers/example_controller_test.exs
defmodule OndinWeb.ExampleControllerTest do
  use OndinWeb.ConnCase

  test "GET /api/example", %{conn: conn} do
    conn = get(conn, ~p"/api/example")
    assert json_response(conn, 200)["message"] == "Hello from Example Controller"
  end
end
```

## 모범 사례

1. 컨트롤러는 단일 책임 원칙을 따르도록 구성
2. 비즈니스 로직은 컨텍스트 모듈에 구현
3. 라우트는 논리적으로 그룹화하여 관리
4. API 버전 관리가 필요한 경우 스코프를 사용하여 구현
5. 적절한 HTTP 상태 코드 사용
6. 일관된 응답 형식 유지

## 라우트 확인

현재 설정된 모든 라우트를 확인하려면 다음 명령어를 실행:

```bash
mix phx.routes
``` 